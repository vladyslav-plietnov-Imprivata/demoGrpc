buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "io.freefair.lombok" version "5.3.0"
    id 'java'
}

def grpcVersion = '1.33.1'
def protocVersion = '3.13.0'

apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

group 'com.pl'
version '0.0.1-SNAPSHOT'
sourceCompatibility = '15'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    protobuf(project(':demo-grpc'))

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    compile "io.grpc:grpc-netty:${grpcVersion}"

    implementation group: 'io.grpc', name: 'grpc-stub', version: '1.33.1'
    implementation group: 'io.grpc', name: 'grpc-api', version: '1.33.1'
    implementation group: 'io.grpc', name: 'grpc-protobuf', version: '1.33.1'
    implementation group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '1.6.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

def generatedSourcesDir = "$projectDir/generated-src"

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'generated-src/main/java']
        }
    }
}

bootJar {
    enabled = false
}

idea {
    module {
        generatedSourceDirs += file('generated-src/main/java')
    }
}

protobuf {
    generatedFilesBaseDir = generatedSourcesDir

    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}
